$dbi
$dbi
install.packages(dbi)
install.packages("DBI")
library(googlesheets4)
library(googlesheets4)
library(ggplot2)
library(readxl)
library(dplyr)
library(cointReg)
datos_final_2 <- read_excel("C:\Users\Axel Canales\Documents\TESIS\Analisis descriptivo\datos final 2.xlsx")
datos <- data.frame(datos_final_2)
population.model <- lm(LOGPIBCAP_SA ~ X1_SA+I(X1_SA^2)+X2_SA+X3_SA+D_2008+D_2018, datos)
summary(population.model)
#Regresion FMOLS
x_cuadratico = datos$X1_SA^2
x_cubico = datos$X1_SA^3
c = rep(1,64)
x = cbind(datos[4:8],x_cuadratico,x_cubico,c)
y= cbind(datos[1])
fmols = cointRegFM(x, y, kernel = "ba", bandwidth = "nw")
print(fmols)
#Regresion IMOLS
x_cuadratico = datos$X1_SA^2
c = rep(1,64)
x = cbind(datos[4:8],x_cuadratico,c)
y= cbind(datos[1])
fmols = cointRegIM(x, y, kernel = "ba", bandwidth = "nw")
print(fmols)
#Sampling the data
sample.data <-
datos[sample(nrow(datos), 64, replace = TRUE), ]
sample.model <- lm(LOGPIBCAP_SA  ~ X1_SA+I(X1_SA^2)+X2_SA+X3_SA+D_2008+D_2018, data = sample.data)
summary(sample.model)
#Plotting the models
plot(LOGPIBCAP_SA ~ X1_SA+I(X1_SA^2)+X2_SA+X3_SA+D_2008+D_2018, col = "gray", main = 'Population and Sample Regressions')
abline(coef(population.model)[1], coef(population.model)[2], col = "red")
abline(coef(sample.model)[1],
coef(sample.model)[2],
col = "blue",
lty = 2)
legend(
"topleft",
legend = c("Sample", "Population"),
col = c("red", "blue"),
lty = 1:2,
cex = 0.8)
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
path <- getwd()
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA3",
col_names = TRUE,
range = "A1:I69"
)
library(patchwork)#para combinar graficos en una imagen
library(ggplot2)
library(fUnitRoots)
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(aTSA) #pptest
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA3",
col_names = TRUE,
range = "A1:I69"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP",
"gdp_nom" = "RAW_GDP_NOM"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop","gdp_nom")
#Rescale variables from BCN to millions of cords
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6,
gdp_nom=gdp_nom*10^6
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 50:68) {
raw_data[x,10] = (raw_data[x-1,10] +raw_data[x-2,10] +raw_data[x-3,10] +raw_data[x-4,10])/4
}
for (x in 28:1) {
raw_data[x,10] = (raw_data[x+1,10] +raw_data[x+2,10] +raw_data[x+3,10] +raw_data[x+4,10])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,10])
}
for (x in 50:68) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,10])
}
raw_data <- raw_data %>%
mutate(
log_gdp_pc = log(gdp/pop),
gov_gdp = (gov_con + pub_inv)/gdp_nom,
gov_con_gdp = gov_con/gdp_nom,
pub_inv_gdp= pub_inv/gdp_nom,
priv_inv_gdp = priv_inv/gdp_nom,
tr_op = (x+m)/gdp_nom,
)
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = log_gdp_pc/lag(log_gdp_pc)-1
)
#create dummies
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
ts_vars <- ts(data = raw_data[,11:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
#creating variable for date
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
seasonal_adj <- final(seasonal_adj)
seas_plot7 <- ggplot(df_seas, aes(x =df_seas[,3])) +
geom_point(aes (y=df_seas[,2]), shape=16)+
geom_smooth(aes(y=df_seas[,2]), method="lm", formula = y ~ x + I(x^2), se=FALSE)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0)
#      plot.caption = element_text(hjust = 0),
#      plot.title.position = "plot",
#      plot.title = element_text(color = "black", size = 10, face = "bold"),
#      plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
#      plot.caption.position = "plot",
#      axis.text.x = element_text(angle=90, hjust = 1)
)+
labs(y="Logaritmo del PIB per cápita",
x="Gasto de Gobierno agregado (porcentaje del PIB)",
caption = "Fuente: Elaboración propia")
seas_plot7
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename(
"date" = "df$date",
)
seas_plot7 <- ggplot(df_seas, aes(x =df_seas[,3])) +
geom_point(aes (y=df_seas[,2]), shape=16)+
geom_smooth(aes(y=df_seas[,2]), method="lm", formula = y ~ x + I(x^2), se=FALSE)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0)
#      plot.caption = element_text(hjust = 0),
#      plot.title.position = "plot",
#      plot.title = element_text(color = "black", size = 10, face = "bold"),
#      plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
#      plot.caption.position = "plot",
#      axis.text.x = element_text(angle=90, hjust = 1)
)+
labs(y="Logaritmo del PIB per cápita",
x="Gasto de Gobierno agregado (porcentaje del PIB)",
caption = "Fuente: Elaboración propia")
seas_plot7
seas_plot8 <- ggplot(df_seas, aes(x =df_seas[,5])) +
geom_point(aes (y=df_seas[,2]), shape=16)+
geom_smooth(aes(y=df_seas[,2]), method="lm", formula = y ~ x + I(x^2), se=FALSE)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0)
#      plot.caption = element_text(hjust = 0),
#      plot.title.position = "plot",
#      plot.title = element_text(color = "black", size = 10, face = "bold"),
#      plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
#      plot.caption.position = "plot",
#      axis.text.x = element_text(angle=90, hjust = 1)
)+
labs(y="Logaritmo del PIB per cápita",
x="Gasto de Gobierno agregado (porcentaje del PIB)",
caption = "Fuente: Elaboración propia")
seas_plot8
bootstrao_lin_ag <- read.csv(paste(getwd(), "dofiles/lineales_agregado.csv", sep="/"),header=FALSE)
bootstrao_cuad_ag<- read.csv(paste(getwd(), "dofiles/cuadraticos_agregado.csv", sep="/"),header=FALSE)
bootstrao_lin_inv<-read.csv(paste(getwd(), "dofiles/lineales_inversion.csv", sep="/"),header=FALSE)
bootstrao_cuad_inv<-read.csv(paste(getwd(), "dofiles/cuadraticos_inversion.csv", sep="/"),header=FALSE)
bootstrap<-as.data.frame(cbind(bootstrao_lin_ag,bootstrao_cuad_ag,bootstrao_lin_inv,bootstrao_cuad_inv ))
colnames(bootstrap)<-c("lin_ag", "cuad_ag", "lin_inv", "cuad_inv")
bootstrap <- bootstrap %>%
mutate(
ag_op = -lin_ag/(2*cuad_ag),
inv_op = -lin_inv/(2*cuad_inv),
)
mean_ag_op <- mean(bootstrap$ag_op)
mean_inv_op <- mean(bootstrap$inv_op)
se_ag_op <- sd(bootstrap$ag_op)/sqrt(length(bootstrap$ag_op))
se_inv_op <- sd(bootstrap$inv_op)/sqrt(length(bootstrap$inv_op))
critical_95<-qnorm(p=0.05, mean=0, sd=1, lower.tail = FALSE)
df <-length(bootstrap$inv_op)-1
critical_t_95 <- -qt(p=0.05,df)
liminf_ag<-mean_ag_op-critical_95*se_ag_op
limsup_ag<-mean_ag_op+critical_95*se_ag_op
liminf_inv<-mean_inv_op-critical_95*se_inv_op
limsup_inv<-mean_inv_op+critical_95*se_inv_op
t_liminf_ag<-mean_ag_op-critical_t_95*se_ag_op
t_limsup_ag<-mean_ag_op+critical_t_95*se_ag_op
t_liminf_inv<-mean_inv_op-critical_t_95*se_inv_op
t_limsup_inv<-mean_inv_op+critical_t_95*se_inv_op
bootstrao_lin_ag <- read.csv(paste(getwd(), "dofiles/lineales_agregado.csv", sep="/"),header=FALSE)
setwd('C:/Users/Axel Canales/Documents/GitHub/govsize_2023')
path <- getwd()
bootstrao_lin_ag <- read.csv(paste(getwd(), "dofiles/lineales_agregado.csv", sep="/"),header=FALSE)
bootstrao_cuad_ag<- read.csv(paste(getwd(), "dofiles/cuadraticos_agregado.csv", sep="/"),header=FALSE)
bootstrao_lin_inv<-read.csv(paste(getwd(), "dofiles/lineales_inversion.csv", sep="/"),header=FALSE)
bootstrao_cuad_inv<-read.csv(paste(getwd(), "dofiles/cuadraticos_inversion.csv", sep="/"),header=FALSE)
bootstrap<-as.data.frame(cbind(bootstrao_lin_ag,bootstrao_cuad_ag,bootstrao_lin_inv,bootstrao_cuad_inv ))
colnames(bootstrap)<-c("lin_ag", "cuad_ag", "lin_inv", "cuad_inv")
bootstrap <- bootstrap %>%
mutate(
ag_op = -lin_ag/(2*cuad_ag),
inv_op = -lin_inv/(2*cuad_inv),
)
mean_ag_op <- mean(bootstrap$ag_op)
mean_inv_op <- mean(bootstrap$inv_op)
se_ag_op <- sd(bootstrap$ag_op)/sqrt(length(bootstrap$ag_op))
se_inv_op <- sd(bootstrap$inv_op)/sqrt(length(bootstrap$inv_op))
critical_95<-qnorm(p=0.05, mean=0, sd=1, lower.tail = FALSE)
df <-length(bootstrap$inv_op)-1
critical_t_95 <- -qt(p=0.05,df)
liminf_ag<-mean_ag_op-critical_95*se_ag_op
limsup_ag<-mean_ag_op+critical_95*se_ag_op
liminf_inv<-mean_inv_op-critical_95*se_inv_op
limsup_inv<-mean_inv_op+critical_95*se_inv_op
t_liminf_ag<-mean_ag_op-critical_t_95*se_ag_op
t_limsup_ag<-mean_ag_op+critical_t_95*se_ag_op
t_liminf_inv<-mean_inv_op-critical_t_95*se_inv_op
t_limsup_inv<-mean_inv_op+critical_t_95*se_inv_op
View(bootstrap)
ordered_bootstrap_ag <- order(bootstrap$ag_op)
ordered_bootstrap_ag <- as.data.frame(order(bootstrap$ag_op))
View(ordered_bootstrap_ag)
bootstrap$ag_op))
bootstrap$ag_op))
bootstrap$ag_op
ordered_bootstrap_ag <- boostrap %>%
arrange(desc(bootstrap$ag_op))  %>%
select(bootstrap$ag_op)
ordered_bootstrap_ag <- bootstrap %>%
arrange(desc(bootstrap$ag_op))  %>%
select(bootstrap$ag_op)
View(ordered_bootstrap_ag)
rm(ordered_bootstrap_ag)
ordered_bootstrap_ag <- bootstrap %>%
arrange(desc(bootstrap$ag_op))  %>%
select(bootstrap$ag_op)
ordered_bootstrap_ag <- bootstrap[order(bootstrap$ag_op)]
ordered_bootstrap_ag <- bootstrap[order(bootstrap$ag_op),]
View(ordered_bootstrap_ag)
View(bootstrap)
stack(lapply(bootstrap[5:6], quantile, prob = 0.95, names = FALSE))
stack(lapply(bootstrap[5:6], quantile, prob = 0.05, names = FALSE))
unname(quantile(bootstrap[5:6],na.rm = T,probs = c(0.05,0.95)))
unname(quantile(bootstrap[,6],na.rm = T,probs = c(0.05,0.95)))
unname(lapply(bootstrap[5:6], quantile, na.rm=T,  prob = c(0.05,0.95), names = FALSE))
?quantile
ordered_bootstrap_ag <- bootstrap[order(bootstrap$ag_op),]
View(ordered_bootstrap_ag)
ordered_bootstrap_ag <- bootstrap[order(bootstrap$ag_op),5]
ordered_bootstrap_ag <- as.data.frame(bootstrap[order(bootstrap$ag_op),5])
ordered_bootstrap_inv <- as.data.frame(bootstrap[order(bootstrap$inv_op),6])
View(ordered_bootstrap_inv)
View(ordered_bootstrap_ag)
bootstrao_lin_ag <- read.csv(paste(getwd(), "dofiles/lineales_agregado.csv", sep="/"),header=FALSE)
bootstrao_cuad_ag<- read.csv(paste(getwd(), "dofiles/cuadraticos_agregado.csv", sep="/"),header=FALSE)
bootstrao_lin_inv<-read.csv(paste(getwd(), "dofiles/lineales_inversion.csv", sep="/"),header=FALSE)
bootstrao_cuad_inv<-read.csv(paste(getwd(), "dofiles/cuadraticos_inversion.csv", sep="/"),header=FALSE)
bootstrap<-as.data.frame(cbind(bootstrao_lin_ag,bootstrao_cuad_ag,bootstrao_lin_inv,bootstrao_cuad_inv ))
colnames(bootstrap)<-c("lin_ag", "cuad_ag", "lin_inv", "cuad_inv")
bootstrap <- bootstrap %>%
mutate(
ag_op = -lin_ag/(2*cuad_ag),
inv_op = -lin_inv/(2*cuad_inv),
)
unname(lapply(bootstrap[5:6], quantile, na.rm=T,  prob = c(0.05,0.95), names = FALSE))
values<-unname(lapply(bootstrap[5:6], quantile, na.rm=T,  prob = c(0.05,0.95), names = FALSE))
values[[1],1]
values[,1]
values[[1]]
values[[1]][1,1]
ag_bootstrap <-values[[1]]
inv_bootstrap <- values[[2]]
ag_bootstrap[1,1]
ag_bootstrap[1]
ag_bootstrap[2]
ag_bootstrap <-values[[1]]
inv_bootstrap <- values[[2]]
tabla_10<-c(
"Gasto Público Agregado",
"Inversión Fija Pública"
)
tabla_10 <- data.frame(tabla_10)
tabla_10$opt_mean <- c(
paste( round(100*mean_ag_op,2),"%"),
paste( round(100*mean_inv_op,2),"%")
)
tabla_10$lim_inf <- c(
paste(round(100*ag_bootstrap[1],2),"%"),
paste(round(100*ag_bootstrap[2],2),"%")
)
tabla_10$lim_sup<- c(
paste(round(100*inv_bootstrap[1],2),"%"),
paste(round(100*inv_bootstrap[2],2),"%")
)
#generating latex code
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow  \\multicolumn{1}{c}{Variable} &
\\multicolumn{1}{c}{Nivel óptimo de gasto (% del PIB)}&
\\multicolumn{2}{c}{Intervalo de confianza}\\\\
\\midrule
\\headrow  \\multicolumn{1}{c}{} &
\\multicolumn{1}{c}{} &
\\multicolumn{1}{c}{Límite inferior} &
\\multicolumn{1}{c}{Límite superior}\\\\
\\bottomrule")
print(xtable(tabla_10), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
